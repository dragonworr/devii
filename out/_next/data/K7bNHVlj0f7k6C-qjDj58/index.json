{"pageProps":{"readme":"<p align=\"center\">\n  <h1 align=\"center\">Devii</h1>\n</p>\n<p align=\"center\">\n  A developer blog starter for 2020. <br/>Next.js + React + TypeScript + <br/>Markdown + syntax highlighting + SEO + <br/>RSS generation\n</p>\n\n<p align=\"center\">\nif you're happy and you know it, star this repo\n</p>\n<p align=\"center\">created by <a href=\"https://twitter.com/vriad\" target=\"_blank\">@vriad</a>\n</p>\n<p align=\"center\">\n  <a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\">\n  <img src=\"https://img.shields.io/github/license/vriad/devii?alt\" alt=\"License\" style=\"width:100px;\">\n  </a>\n</p>\n<br/>\n<br/>\n<br/>\n\nA dev blog starter for 2020.\n\n- Works as a Markdown static-site generator out of the box\n- Supports static exporting and hot reload (powered by Next.js)\n- Makes it easy to write custom pages/code in React + TypeScript\n- Out of the box support for code blocks with syntax highlighting\n\nRead more about the motivation + design behind Devii at [https://vriad.com/blog/devii](https://vriad.com/blog/devii).\n\n## Get started\n\nTo get started:\n\n1. Fork this repo\n2. ```\n   git clone git@github.com:yourusername/devii.git my-blog\n   cd my-blog\n   yarn\n   ```\n3. Start the development server with `yarn dev`. This should start a server on `http://localhost:3000`.\n\n## Powered by Next.js\n\nThe core of this repo is [Next.js](https://https://nextjs.org). We chose Next.js because it's the simplest, most elegant way to generate a static version of a React-based website. The documentation is excellent; read it first: [Next.js Documentation](https://nextjs.org/docs).\n\nThe important con\n\n## Project structure\n\nHere's is an abbreviated version of the project structure. Certain config files (`next.config.js`, `next-end.d.ts`, `.gitignore`) have been removed for simplicity.\n\n```\n.\n├── README.md\n├── public // all static assets (images, css, etc) go here\n├── pages // every .tsx component in this dir becomes a page of the final site\n|   ├── index.tsx // the home page (which has access to the list of all blog posts)\n|   ├── blog\n|       ├── [blog].md // a template component that renders the blog posts under `/md/blog`\n├── md\n|   ├── blog\n|       ├── devii.md // this page!\n        ├── whatever.md // every MD file in this directory becomes a blog post\n├── components\n|   ├── Code.tsx\n|   ├── Markdown.tsx\n|   ├── Header.tsx\n|   ├── Header.tsx\n|   ├── <various>\n├── loader.ts // contains utility functions for loading/parsing Markdown\n├── node_modules\n├── tsconfig.json\n├── package.json\n```\n\nNext.js generates a new webpage for each file in the `pages` directory. If you want to add an About page to your blog, just add `about.tsx` inside `pages` and start writing the page.\n\nBy default the repo only contains two pages: a home page (`/pages/index.tsx`) and a blog page (`/pages/[blog].md`).\n\nThe file `[blog].ts` follows the Next.js convention of using square brackets to indicate a [dynamic route](https://nextjs.org/docs/routing/dynamic-routes).\n\n## The home page\n\nThe home page is intentionally minimal. You can put whatever you want in `index.tsx`; one of our goals in designing Devii was to place no restrictions on the developer. Use your imagination! Your website is the online manifestion of you. You can use whatever npm packages or styling libraries you like.\n\n## Styling\n\nDevii is unopinionated about styling. Because your Devii site is a standard React app under the hood, you can use your favorite library from `npm` to do styling.\n\nDevii provides certain styles by default, notably in the Markdown renderer (`/components/Markdown.tsx`). Those styles are implemented using Next's built-in styling solution `styled-jsx`. Unfortunately it was necessary to make those styles global, since `styled-jsx` [doesn't play nice](https://github.com/vercel/styled-jsx/issues/573) with third-party components (in this case `react-markdown`).\n\nFeel free to re-implemement the built-in styles with your library of choice If you choose to use a separate styling library ([emotion](https://emotion.sh/) is pretty glorious) then you could re-implement the default styles\n\n## Adding a new blog post\n\nJust add a Markdown file under `md/blog/` to create a new blog post:\n\n1. Create a new Markdown file called `foo.md` within the `/md/blog` directory\n2. Add in some basic Markdown content\n3. Then go to `http://localhost:3000/blog/foo`. You should see the new post.\n\n## Frontmatter support\n\nEvery Markdown file can include a \"frontmatter block\" containing various metadata. This is the frontmatter blog from the sample blog post (`md/blog/test.md`):\n\n```\n---\ntitle: Introducing Devii\nsubtitle: Bringing the power of React, TypeScript, and static generation to dev blogs everywhere\ndatePublished: 1589064522569\nauthor: Ben Bitdiddle\ntags:\n  - Devii\n  - Blogs\nauthorPhoto: /profile.jpg\nbannerPhoto: /brook.jpg\nthumbnailPhoto: /brook.jpg\n---\n```\n\nThis metadata will be loaded and parsed into a TypeScript object with the following type.\n\n```ts\ntype PostData = {\n  path: string;\n  title?: string;\n  subtitle?: string;\n  content: string;\n  datePublished?: number;\n  author?: string;\n  authorPhoto?: string;\n  tags?: string[];\n  bannerPhoto?: string;\n  thumbnailPhoto?: string;\n};\n```\n\n## Medium-inspired design\n\nThe Markdown renderer (`Markdown.tsx`) provides a default style inspired by Medium. Just modify the CSS in `Markdown.tsx` to customize the design to your liking.\n\n## GitHub-style code blocks\n\nYou can easily drop code blocks into your blog posts using triple-backtick syntax ([just like GitHub](https://help.github.com/en/github/writing-on-github/creating-and-highlighting-code-blocks)). No more embedding CodePen iframes! 🚀\n\nWorks out-of-the-box for all programming languages. Specify your language with a \"language tag\". So this:\n\n  <pre>\n  ```ts\n  // pretty neat huh?\n  const test = (arg: string) => {\n    return arg.length > 5;\n  };\n  ```</pre>\n\nturns into\n\n```ts\n// pretty neat huh?\nconst test = (arg: string) => {\n  return arg.length > 5;\n};\n```\n\n## Markdown loading\n\n_You don't need to understand all of this to use Devii. Consider this an \"advanced guide\" you can use if you want to customize the structure of the site._\n\nMarkdown posts are loaded during Next.js static build step. Check out the [Data Fetching](https://nextjs.org/docs/basic-features/data-fetching) documentation to learn more about this.\n\nHere's the short version: if export a function called `getStaticProps` from one of your page components, Next.js will execute that function, take the result, and pass the `props` property (which should be another object) into your page as props.\n\nYou can dynamically load and parse a Markdown file using `loadMarkdownFile`, a utility function implemented in `loader.ts`. It is an async function that returns a `PostData` TypeScript object containing all the metadata keys listed above:\n\nFor an example of this, check out the `getStaticProps` implementation from the homepage. The function calls `loadBlogPosts` - a utilty function that loads _every_ blog posts in the `/md/blog/` directory, parses them, and returns `PostData[]`.\n\n```ts\nexport const getStaticProps = async () => {\n  const posts = await loadBlogPosts();\n  return { props: { posts } };\n};\n```\n\nThere are a few utility functions in `loader.ts` that Devii uses.\n\n- `loadPost` loads/parses a Markdown file and returns a `PostData`. It takes on argument, the name of a file in the `md/` directory. For instance `loadPost('about.md')` would load `/md/about.md` and `loadPost('blog/test.md'`) would load `/md/blog/test.md`.\n- `loadBlogPosts`: loads/parses all the files in `/md/blog/`. Returns `PostData[]`. Used in `index.tsx` to read a list of all published blog posts.\n- `loadMarkdownFile`: loads a Markdown file but doesn't parse it. Returns the string content. Useful if you want to implement certain parts of a page in Markdown and other parts in React.\n- `loadMarkdownFiles`: accepts a [glob](https://docs.python.org/3/library/glob.html) pattern and loads all the files inside `/md/` whose names match the pattern. Used internally by `loadBlogPosts`.\n\n## Static generation\n\nYou can generate a fully static version of your site using `yarn build && yarn export`. This step is entirely powered by Next.js. The static site is exported to the `out` directory.\n\nAfter its generated, use your static file hosting service of choice (Firebase Hosting, Amazon S3, Vercel) to deploy your site.\n\n## Global configs\n\nThere is a `globals.ts` file in the project root containing some settings/configuration metadata about your site:\n\n- `yourName`: Your name, used for the copyright tags in the footer and the RSS feed, e.g. Alyssa P. Hacker\n- `siteName`: The title of your blog, e.g. `Alyssa's Cool Blog`;\n- `siteDescription`: A short description, used in the `meta` description tag, e.g. 'I write about code \\'n stuff';\n- `siteCreationDate`: Used in the generated RSS feed. Use this format: 'March 3, 2020 04:00:00 GMT';\n- `twitterHandle`: The twitter handle for you or your blog/company, used in the Twitter meta tags. Include the @ symbol, e.g. '@alyssaphacker';\n- `email`: Your email, used as the \"webMaster\" and \"managingEditor\" field of the generated RSS feed, e.g. `alyssa@example.com`;\n- `url`: The base URL of your website, used to \"compute\" default canonical links from relative paths, e.g. 'https://alyssaphacker.com';\n- `accentColor`: The header and footer background color, e.g. `#4fc2b4`;\n\n## RSS feed generation\n\nAn RSS feed is auto-generated from your blog post feed. This feed is generated using the `rss` module (for converting JSON to RSS format) and `showdown` for converting the markdown files to RSS-compatible HTML.\n\nFor RSS generation to work, all your posts must contain a `datePublished` timestamp in their frontmatter metadata. To examine or customize the RSS generation, check out the `rssUtil.ts` file in the root directory.\n\n## SEO\n\nEvery blog post page automatically populated meta tags based on the post metadata. This includes a `title` tag, `meta` tags, `og:` tags, Twitter metadata, and a `link` tag containing the canonical URL.\n\nThe default value of the canonical URL is computed by concatenating the value of your `url` config (see Global Configs above) and the relative path of your post. Verify that the canonical URL is exactly equivalent to the URL in the browser when visiting your live site, otherwise your site's SEO may suffer.\n\n## Insanely customizable\n\nThere's nothing \"under the hood\" here. You can view and modify all the files that provide the functionality listed above. Devii just provides a project scaffold, some Markdown-loading loading utilities (in `loader.ts`), and some sensible styling defaults (especially in `Markdown.tsx`).\n\nTo get started customizing, check out the source code of `index.tsx` (the home page), `BlogPost.tsx` (the blog post template), and `Markdown.tsx` (the Markdown renderer).\n\nHead to the GitHub repo to get started: [https://github.com/vriad/devii](https://github.com/vriad/devii). If you like this project, leave a ⭐️star⭐️ to help more people find Devii 😎\n\n## CLI\n\n### `yarn dev`\n\nStarts the development server. Equivalent to `next dev`.\n\n### `yarn build`\n\nCreates an optimized build of your site. Equivalent to `next build`.\n\n### `yarn export`\n\nExports your site to static files. All files are written to `/out`. Use your static file hosting service of choice (Firebase Hosting, Amazon S3, Vercel) to deploy your site. Equivalent to `next export`.\n","posts":[{"path":"blog/dan-abramov","title":"Dan Abramov knows about Devii","subtitle":null,"datePublished":1594425078471,"tags":["Dan Abramov"],"description":null,"canonicalUrl":"https://alyssaphacker.com/blog/dan-abramov","author":"Colin McDonnell","authorPhoto":"/profile.jpg","bannerPhoto":"/danabramov.png","thumbnailPhoto":"/danabramov_thumb.png","content":"\nDan Abramov knows about Devii!\n\n> Seems like it might be useful!\n> — Dan Abramov, taken entirely out of context\n\nI don't want to brag, but Devii is kind of a big deal.\n"},{"path":"blog/devii","title":"Introducing Devii","subtitle":"Bringing the power of React, TypeScript, and static generation to dev blogs everywhere","datePublished":1589064522569,"tags":["Devii","Blogs"],"description":null,"canonicalUrl":"https://alyssaphacker.com/blog/devii","author":"Ben Bitdiddle","authorPhoto":"/profile.jpg","bannerPhoto":"/brook.jpg","thumbnailPhoto":"/brook.jpg","content":"\nThis page is built with Devii! Check out the source code for this under `/md/blog/test.md`.\n\nDevii is a starter kit for building a personal website with the best tools 2020 has to offer.\n\n- **Markdown-based**: Just add a Markdown file to `/md/blog` to add a new post to your blog!\n- **TypeScript + React**: aside from the parts that are rendered Markdown, everything else is fully built with TypeScript and functional React components. Implementing any sort of interactive widget is often hard using existing Markdown-centric static-site generators, but Devii makes it easy to mix Markdown and React on the same page.\n- **Frontmatter support**: Every post can include a frontmatter block containing metadata: `title`, `subtitle`, `datePublished` (timestamp), `author`, `authorPhoto`, and `bannerPhoto`.\n- **Medium-inspired styles**: The Markdown renderer (`Markdown.tsx`) contains default styles inspired by Medium.\n- **Static generation**: you can generate a fully static version of your site using `yarn build && yarn export`. Powered by Next.js.\n- **GitHub-style code blocks**: with syntax highlighting powered by [react-syntax-highlighter](https://github.com/conorhastings/react-syntax-highlighter). Works out-of-the-box for all programming languages. Just use Markdown's triple backtick syntax with a \"language identifier\", [just like GitHub](https://help.github.com/en/github/writing-on-github/creating-and-highlighting-code-blocks).\n\n  ```ts\n  // pretty neat huh?\n  const test: (arg: string) => boolean = (arg) => {\n    return arg.length > 5;\n  };\n  ```\n\n- **Utterly customizable**: We provide a minimal interface to get you started, but you can customize every aspect of the rendering and styling by just modifying `index.tsx` (the home page), `BlogPost.tsx` (the blog post template), and `Markdown.tsx` (the Markdown renderer). And of course you can add entirely new pages as well!\n\nHead to the GitHub repo to get started: [https://github.com/vriad/devii](https://github.com/vriad/devii). If you like this project, leave a ⭐️star⭐️ to help more people find Devii 😎\n"}]},"__N_SSG":true}